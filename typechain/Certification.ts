/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Certification {
  export type DocumentStruct = {
    issuer: AddressLike;
    recipient: AddressLike;
    documentHash: string;
    metadataURI: string;
    timestamp: BigNumberish;
    expirationDate: BigNumberish;
    isValid: boolean;
    isRevoked: boolean;
  };

  export type DocumentStructOutput = [
    issuer: string,
    recipient: string,
    documentHash: string,
    metadataURI: string,
    timestamp: bigint,
    expirationDate: bigint,
    isValid: boolean,
    isRevoked: boolean
  ] & {
    issuer: string;
    recipient: string;
    documentHash: string;
    metadataURI: string;
    timestamp: bigint;
    expirationDate: bigint;
    isValid: boolean;
    isRevoked: boolean;
  };

  export type VerificationRequestStruct = {
    documentId: BytesLike;
    requester: AddressLike;
    verifier: AddressLike;
    isVerified: boolean;
    isRejected: boolean;
    verificationNotes: string;
    timestamp: BigNumberish;
  };

  export type VerificationRequestStructOutput = [
    documentId: string,
    requester: string,
    verifier: string,
    isVerified: boolean,
    isRejected: boolean,
    verificationNotes: string,
    timestamp: bigint
  ] & {
    documentId: string;
    requester: string;
    verifier: string;
    isVerified: boolean;
    isRejected: boolean;
    verificationNotes: string;
    timestamp: bigint;
  };
}

export interface CertificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeVerification"
      | "documentCount"
      | "documentVerifications"
      | "documents"
      | "getDocument"
      | "getDocumentVerifications"
      | "getInstitutionDocuments"
      | "getUserDocuments"
      | "getVerificationRequest"
      | "institutionDocuments"
      | "isDocumentValid"
      | "issueDocument"
      | "owner"
      | "registerUser"
      | "requestVerification"
      | "revokeDocument"
      | "updateUserRole"
      | "userDocuments"
      | "userRoles"
      | "verificationRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DocumentIssued"
      | "DocumentRevoked"
      | "RoleUpdated"
      | "UserRegistered"
      | "VerificationCompleted"
      | "VerificationRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "completeVerification",
    values: [BytesLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "documentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "documentVerifications",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "documents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentVerifications",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstitutionDocuments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDocuments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "institutionDocuments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDocumentValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueDocument",
    values: [BytesLike, AddressLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestVerification",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDocuments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationRequests",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "documents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstitutionDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "institutionDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDocumentValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationRequests",
    data: BytesLike
  ): Result;
}

export namespace DocumentIssuedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    issuer: AddressLike,
    recipient: AddressLike,
    documentHash: string
  ];
  export type OutputTuple = [
    documentId: string,
    issuer: string,
    recipient: string,
    documentHash: string
  ];
  export interface OutputObject {
    documentId: string;
    issuer: string;
    recipient: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentRevokedEvent {
  export type InputTuple = [documentId: BytesLike, issuer: AddressLike];
  export type OutputTuple = [documentId: string, issuer: string];
  export interface OutputObject {
    documentId: string;
    issuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleUpdatedEvent {
  export type InputTuple = [user: AddressLike, newRole: BigNumberish];
  export type OutputTuple = [user: string, newRole: bigint];
  export interface OutputObject {
    user: string;
    newRole: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, role: BigNumberish];
  export type OutputTuple = [user: string, role: bigint];
  export interface OutputObject {
    user: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationCompletedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    isVerified: boolean,
    notes: string
  ];
  export type OutputTuple = [
    requestId: string,
    isVerified: boolean,
    notes: string
  ];
  export interface OutputObject {
    requestId: string;
    isVerified: boolean;
    notes: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    documentId: BytesLike,
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: string,
    documentId: string,
    requester: string
  ];
  export interface OutputObject {
    requestId: string;
    documentId: string;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Certification extends BaseContract {
  connect(runner?: ContractRunner | null): Certification;
  waitForDeployment(): Promise<this>;

  interface: CertificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeVerification: TypedContractMethod<
    [_requestId: BytesLike, _isVerified: boolean, _notes: string],
    [void],
    "nonpayable"
  >;

  documentCount: TypedContractMethod<[], [bigint], "view">;

  documentVerifications: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  documents: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, bigint, boolean, boolean] & {
        issuer: string;
        recipient: string;
        documentHash: string;
        metadataURI: string;
        timestamp: bigint;
        expirationDate: bigint;
        isValid: boolean;
        isRevoked: boolean;
      }
    ],
    "view"
  >;

  getDocument: TypedContractMethod<
    [_documentId: BytesLike],
    [Certification.DocumentStructOutput],
    "view"
  >;

  getDocumentVerifications: TypedContractMethod<
    [_documentId: BytesLike],
    [string[]],
    "view"
  >;

  getInstitutionDocuments: TypedContractMethod<
    [_institution: AddressLike],
    [string[]],
    "view"
  >;

  getUserDocuments: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getVerificationRequest: TypedContractMethod<
    [_requestId: BytesLike],
    [Certification.VerificationRequestStructOutput],
    "view"
  >;

  institutionDocuments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  isDocumentValid: TypedContractMethod<
    [_documentId: BytesLike],
    [boolean],
    "view"
  >;

  issueDocument: TypedContractMethod<
    [
      _documentId: BytesLike,
      _recipient: AddressLike,
      _documentHash: string,
      _metadataURI: string,
      _expirationDays: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerUser: TypedContractMethod<
    [_user: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestVerification: TypedContractMethod<
    [_documentId: BytesLike, _verifier: AddressLike],
    [string],
    "nonpayable"
  >;

  revokeDocument: TypedContractMethod<
    [_documentId: BytesLike],
    [void],
    "nonpayable"
  >;

  updateUserRole: TypedContractMethod<
    [_user: AddressLike, _newRole: BigNumberish],
    [void],
    "nonpayable"
  >;

  userDocuments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  userRoles: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  verificationRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, boolean, boolean, string, bigint] & {
        documentId: string;
        requester: string;
        verifier: string;
        isVerified: boolean;
        isRejected: boolean;
        verificationNotes: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeVerification"
  ): TypedContractMethod<
    [_requestId: BytesLike, _isVerified: boolean, _notes: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "documentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "documentVerifications"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "documents"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, bigint, boolean, boolean] & {
        issuer: string;
        recipient: string;
        documentHash: string;
        metadataURI: string;
        timestamp: bigint;
        expirationDate: bigint;
        isValid: boolean;
        isRevoked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<
    [_documentId: BytesLike],
    [Certification.DocumentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDocumentVerifications"
  ): TypedContractMethod<[_documentId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getInstitutionDocuments"
  ): TypedContractMethod<[_institution: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserDocuments"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVerificationRequest"
  ): TypedContractMethod<
    [_requestId: BytesLike],
    [Certification.VerificationRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "institutionDocuments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDocumentValid"
  ): TypedContractMethod<[_documentId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "issueDocument"
  ): TypedContractMethod<
    [
      _documentId: BytesLike,
      _recipient: AddressLike,
      _documentHash: string,
      _metadataURI: string,
      _expirationDays: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [_user: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestVerification"
  ): TypedContractMethod<
    [_documentId: BytesLike, _verifier: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeDocument"
  ): TypedContractMethod<[_documentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUserRole"
  ): TypedContractMethod<
    [_user: AddressLike, _newRole: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userDocuments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRoles"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "verificationRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, boolean, boolean, string, bigint] & {
        documentId: string;
        requester: string;
        verifier: string;
        isVerified: boolean;
        isRejected: boolean;
        verificationNotes: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DocumentIssued"
  ): TypedContractEvent<
    DocumentIssuedEvent.InputTuple,
    DocumentIssuedEvent.OutputTuple,
    DocumentIssuedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentRevoked"
  ): TypedContractEvent<
    DocumentRevokedEvent.InputTuple,
    DocumentRevokedEvent.OutputTuple,
    DocumentRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoleUpdated"
  ): TypedContractEvent<
    RoleUpdatedEvent.InputTuple,
    RoleUpdatedEvent.OutputTuple,
    RoleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VerificationCompleted"
  ): TypedContractEvent<
    VerificationCompletedEvent.InputTuple,
    VerificationCompletedEvent.OutputTuple,
    VerificationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRequested"
  ): TypedContractEvent<
    VerificationRequestedEvent.InputTuple,
    VerificationRequestedEvent.OutputTuple,
    VerificationRequestedEvent.OutputObject
  >;

  filters: {
    "DocumentIssued(bytes32,address,address,string)": TypedContractEvent<
      DocumentIssuedEvent.InputTuple,
      DocumentIssuedEvent.OutputTuple,
      DocumentIssuedEvent.OutputObject
    >;
    DocumentIssued: TypedContractEvent<
      DocumentIssuedEvent.InputTuple,
      DocumentIssuedEvent.OutputTuple,
      DocumentIssuedEvent.OutputObject
    >;

    "DocumentRevoked(bytes32,address)": TypedContractEvent<
      DocumentRevokedEvent.InputTuple,
      DocumentRevokedEvent.OutputTuple,
      DocumentRevokedEvent.OutputObject
    >;
    DocumentRevoked: TypedContractEvent<
      DocumentRevokedEvent.InputTuple,
      DocumentRevokedEvent.OutputTuple,
      DocumentRevokedEvent.OutputObject
    >;

    "RoleUpdated(address,uint8)": TypedContractEvent<
      RoleUpdatedEvent.InputTuple,
      RoleUpdatedEvent.OutputTuple,
      RoleUpdatedEvent.OutputObject
    >;
    RoleUpdated: TypedContractEvent<
      RoleUpdatedEvent.InputTuple,
      RoleUpdatedEvent.OutputTuple,
      RoleUpdatedEvent.OutputObject
    >;

    "UserRegistered(address,uint8)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "VerificationCompleted(bytes32,bool,string)": TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;
    VerificationCompleted: TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;

    "VerificationRequested(bytes32,bytes32,address)": TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
    VerificationRequested: TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
  };
}
